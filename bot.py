# trigger rebuild
import logging
import datetime
import json
import os

from telegram.ext import (
    ApplicationBuilder, CallbackQueryHandler, MessageHandler,
    ChatMemberHandler, ContextTypes, filters
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

TOKEN = "7699913355:AAFbTLZttNVdkMi6Ub9UbM9jXJjl-BaKiCo"
GROUP_ID = -1000000000000  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
DATA_FILE = "user_choices.json"
MESSAGE_ID_FILE = "message_ids.json"

def load_message_ids():
    if os.path.exists(MESSAGE_ID_FILE):
        with open(MESSAGE_ID_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_message_ids(data):
    with open(MESSAGE_ID_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)




# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±–æ—Ä—É
def get_users_by_choice(chat_data, choice):
    return [f"@{u}" for u, c in chat_data.items() if c == choice]


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —á–∞—Ç–µ
async def update_participant_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    all_data = load_data()
    chat_data = all_data.get(str(chat_id), {})

    message = "üìã *–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:*\n\n"
    message += "üß≥ 4‚Äì5 –∏—é–ª—è: " + ", ".join(get_users_by_choice(chat_data, "4")) + "\n"
    message += "üéâ 5‚Äì6 –∏—é–ª—è: " + ", ".join(get_users_by_choice(chat_data, "5")) + "\n"
    message += "ü§î –î—É–º–∞—é—Ç: " + ", ".join(get_users_by_choice(chat_data, "–¥—É–º–∞—é")) + "\n"
    message += "‚ùå –ù–µ –µ–¥—É—Ç: " + ", ".join(get_users_by_choice(chat_data, "–Ω–µ—Ç"))

    message_ids = load_message_ids()
    stored = message_ids.get(str(chat_id))

    if stored:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=stored,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", e)
    else:
        sent = await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="Markdown")
        message_ids[str(chat_id)] = sent.message_id
        save_message_ids(message_ids)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    choice = query.data
    username = user.username or f"id{user.id}"
    chat_id = query.message.chat.id

    all_data = load_data()
    chat_data = all_data.get(str(chat_id), {})
    chat_data[username] = choice
    all_data[str(chat_id)] = chat_data
    save_data(all_data)

    await query.answer()
    await update_participant_message(context, chat_id)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
async def send_welcome_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    keyboard = [
        [InlineKeyboardButton("üß≥ —Å 4 –Ω–∞ 5 –∏—é–ª—è", callback_data="4")],
        [InlineKeyboardButton("üéâ —Å 5 –Ω–∞ 6 –∏—é–ª—è", callback_data="5")],
        [InlineKeyboardButton("ü§î –ï—â—ë –¥—É–º–∞—é", callback_data="–¥—É–º–∞—é")],
        [InlineKeyboardButton("‚ùå –ù–µ –µ–¥—É", callback_data="–Ω–µ—Ç")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    greeting = """
*–ô–æ—É! –°—ä–µ–∑–∂–∞–µ–º—Å—è –Ω–∞ –¥–∞—á—É ‚Äî –±—É–¥–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ.*  
–ü–ª–µ–¥, –±–∞–Ω—å–∫–∞, –∂–∞—Ä–∞, –±–∞—Å—Å–µ–π–Ω, —à–∞—à–ª—ã—á–æ–∫ ‚Äî –∫–æ—Ä–æ—á–µ, –ø–æ–ª–Ω—ã–π —Ä–µ–ª–∞–∫—Å –≤ –ª—É—á—à–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö.  
–ó–∞–≥–æ—Ä–∞–µ–º –ø–æ–¥ —Å–æ–ª–Ω—Ü–µ–º, —á–∏–ª–∏–º –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ.  
–¢–µ, –∫—Ç–æ –±—ã–ª ‚Äî –∑–Ω–∞—é—Ç. –¢–µ, –∫—Ç–æ –Ω–µ –±—ã–ª ‚Äî –≤–æ—Ç —à–∞–Ω—Å –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å üî•  
–ó–æ–≤—É –≤–∞—Å –Ω–∞ *—Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*, –∏ —Ö–æ—á—É, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Å—Ç–∞–ª —á–∞—Å—Ç—å—é —ç—Ç–æ–π –¥—É—à–µ–≤–Ω–æ–π —Ç—É—Å–æ–≤–∫–∏!

üìç –ì–¥–µ: –ë–∞–±–∏–Ω–æ-2  
üìÖ –ö–æ–≥–¥–∞:  
‚Äî –ü—Ä–∏–µ–∑–∂–∞–π —Å *–≤–µ—á–µ—Ä–∞ 4 –Ω–∞ 5 –∏—é–ª—è* ‚Äî —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç ¬´2 –Ω–æ—á–∏ –∏ –ø–æ–ª–Ω—ã–π —á–∏–ª–ª¬ª  
‚Äî –ò–ª–∏ —Å *5 –Ω–∞ 6 –∏—é–ª—è* ‚Äî –≥–ª–∞–≤–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞ —Å —Å—É–±–±–æ—Ç—ã –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ  
üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî 6 –∏—é–ª—è, —Ç–∞–∫ —á—Ç–æ –≥—É–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ üéâ

üì¶ –ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π:  
ü©¥ –ö—É–ø–∞–ª—å–Ω–∏–∫  
üßñ –ü–æ–ª–æ—Ç–µ–Ω—Ü–µ  
üß∫ –ü–ª–µ–¥–∏–∫  
üß• –û–¥–µ–∂–¥—É –ø–æ –ø–æ–≥–æ–¥–µ  
üòÑ –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –º–æ–∑–≥!

üí¨ –î–∞, –∏ –ø–æ –∫–ª–∞—Å—Å–∏–∫–µ: –∫–∞–∫ –∑–∞–±—ã—Ç—å —Ç–æ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –†–æ–º–∞–Ω—É —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ –æ–Ω ¬´–Ω–µ —Å–º–æ–∂–µ—Ç¬ª, ‚Äî –∏ –æ–Ω *–ø—Ä–æ–±–∏–ª –¥–≤–µ—Ä—å –∫—É–ª–∞–∫–æ–º*, –Ω–µ —Å–∫–∞–∑–∞–≤ –Ω–∏ —Å–ª–æ–≤–∞.  
–¢–∞–∫ —á—Ç–æ –±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã, *–Ω–µ —Å–ø–æ—Ä—å—Ç–µ —Å –†–æ–º–∞–Ω–æ–º* üòÇ

üëá –û—Ç–º–µ—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–µ–¥–µ—à—å:"""

    sent = await context.bot.send_message(chat_id=chat_id, text=greeting, reply_markup=reply_markup, parse_mode="Markdown")
    message_ids = load_message_ids()
    message_ids[str(chat_id)] = sent.message_id
    save_message_ids(message_ids)


# –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
async def new_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.new_chat_members:
        for member in update.message.new_chat_members:
            if member.id == context.bot.id:
                # –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                await send_welcome_message(context, update.effective_chat.id)
            else:
                # –ö—Ç–æ-—Ç–æ –Ω–æ–≤—ã–π –≤—Å—Ç—É–ø–∏–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
                await send_welcome_message(context, update.effective_chat.id)


# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now().date()

    if today == datetime.date(2025, 7, 3):
        for username, choice in user_choices.items():
            if choice == "4":
                try:
                    context.bot.send_message(
                        chat_id=f"@{username}",
                        text="–ô–æ—É! üéâ –ó–∞–≤—Ç—Ä–∞ —É–∂–µ —Å—Ç–∞—Ä—Ç ‚Äî —Ç—ã –≤—ã–±—Ä–∞–ª –µ—Ö–∞—Ç—å —Å 4 –Ω–∞ 5 –∏—é–ª—è, –∏ —ç—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞ –Ω–∞ –¥–≤–µ –Ω–æ—á–∏! –ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –Ω—É–∂–Ω–æ–µ, –≤—ã—Å–ø–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–±–æ—Ç—ã –¥–æ–º–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–¥ —à—É–º –¥–µ—Ä–µ–≤—å–µ–≤ üå≥"
                    )


                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ @{username}: {e}")

    if today == datetime.date(2025, 7, 4):
        for username, choice in user_choices.items():
            if choice == "5":
                try:
                    context.bot.send_message(
                        chat_id=f"@{username}",
                        text="–ô–æ—É! üéâ –ó–∞–≤—Ç—Ä–∞ —É–∂–µ —Å—Ç–∞—Ä—Ç ‚Äî —Ç—ã –≤—ã–±—Ä–∞–ª –µ—Ö–∞—Ç—å —Å 5 –Ω–∞ 6 –∏—é–ª—è, –∏ —ç—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞! –ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –Ω—É–∂–Ω–æ–µ, –≤—ã—Å–ø–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–±–æ—Ç—ã –¥–æ–º–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–¥ —à—É–º –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –≤—Å–ø–ª–µ—Å–∫ —Ä–µ–∫–∏ üåä"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ @{username}: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
from telegram.ext import ApplicationBuilder

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_chat_member))
    application.add_handler(ChatMemberHandler(new_chat_member, chat_member_types=["my_chat_member"]))

    job_queue = application.job_queue
    job_queue.run_daily(send_reminders, time=datetime.time(hour=12, minute=0))

    application.run_polling()


if __name__ == "__main__":
    main()
